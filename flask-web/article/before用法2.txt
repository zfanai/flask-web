
返回主页	
野兽'

    博客园
    首页
    订阅
    管理

CSS 巧用 :before和:after

前几天的晚上较全面的去看了下css的一些文档和资料，大部分的样式运用都没什么大问题了，只是有些许较陌生，但是也知道他们的存在和实现的是什么样式。今天主要想在这篇学习笔记中写的也不多，主要是针对:before和:after写一些内容，还有几个小样式略微带过的介绍下。
什么是:before和:after？ 该如何使用他们？
:before是css中的一种伪元素，可用于在某个元素之前插入某些内容。
:after是css中的一种伪元素，可用于在某个元素之后插入某些内容。
下面我们先跑个简单的代码测试下效果：
复制代码

  <style>
    p:before{
        content: "H"  /*:before和:after必带技能，重要性为满5颗星*/
    }
    p:after{
        content: "d"  /*:before和:after必带技能，重要性为满5颗星*/
    }
  </style>
  <p>ello Worl</p>

复制代码

以上的代码将会在页面中展现的是"Hello World"。我们通过浏览器的"审查元素"看到的内容是：

<p>
  ::before
  "ello Worl"
  ::after
</p>

p标签内部的内容的前面会被插入一个:before伪元素，该伪元素内包含的内容是"H"；而在p标签内的内容后面会被插入一个:after伪元素，该元素包含的内容是"d"。作为一只合格的程序猴子，捍卫"Hello World"的完整存在是必要的。
既然笔记主要针对是:before和:after，那么肯定不会只是仅仅有以上的简单介绍就完事。下面我们看看平常该怎么使用他们。
1.结合border写个对话框的样式。
本兽将上面这句话拆成2部分：结合border，写个对话框的样式。
既然是结合border，那么我们先转个小话题，简单由浅入深的介绍下怎么用border画三角形样式(这个三角形在写对话框样式的时候需要)：
复制代码

  <style>
    .triangle{
        width: 0;
        height: 0;
        border-left:50px solid red;
        border-bottom:50px solid blue;
        border-top:50px solid black;
        border-right:50px solid purple
    }
  </style>
  <div class="triangle"></div>

复制代码

以上代码将会在页面上展示一个正方形，左边是个红色的三角形，右边是紫色的三角形，上面是黑色的三角形，下面是蓝色的三角形。那么有人就会问，我们要的不是三角形么？野兽你画个正方形逗我呢？
我们对上面的样式做些修改：
复制代码

  .triangle{
      width: 0;
      height: 0;
      border:50px solid transparent; /*这里我们将元素的边框宽度设置为50px，transparent表示边框颜色是透明的，solid表示边框是实线的*/
      border-top-color: black;  /*这里我们仅将上边框的颜色设置为黑色，众所周知，css后面的样式代码会覆盖之前的相同的样式代码，至于其他三边的还是透明色*/
      /*border-bottom-color: black; //这里设置底部边框色为黑色
        border-left-color: black;   //这里设置左边边框色为黑色
        border-right-color:black    //这里设置右边边框色为黑色*/
  }

复制代码

然后这时我们就会看到一个在顶部的方向向下的三角形。解释已详细的写在css样式的注释里。
接下来我们加上:before：
复制代码

  <style>
    .test-div{
        position: relative;  /*日常相对定位*/
        width:150px;
        height:36px;
        border-radius:5px;
        border:black 1px solid;
        background: rgba(245,245,245,1)
    }
    .test-div:before{
        content: "";  /*:before和:after必带技能，重要性为满5颗星*/
        display: block;
        position: absolute;  /*日常绝对定位*/
        top:8px;
        width: 0;
        height: 0;
        border:6px solid transparent;
        left:-12px;
        border-right-color: rgba(245,245,245,1);
    }
  </style>
  <div class="test-div"></div>

复制代码

通过以上代码，我们将会看见一个类似微信/QQ的对话框样式,但是美中不足的是，在对话框的四周的边框不是完整的，而是在对话框的突出三角形上是木有边框的T_T瞬间冷场有木有，该怎么办呢？召唤:after穿着棉大衣来救场吧~
完整代码：
复制代码

  <style>
    .test-div{
        position: relative;  /*日常相对定位*/
        width:150px;
        height: 36px;
        border:1px solid black;
        border-radius:5px;
        background: rgba(245,245,245,1)
    }
    .test-div:before,.test-div:after{
        content: "";  /*:before和:after必带技能，重要性为满5颗星*/
        display: block;
        position: absolute;  /*日常绝对定位*/
        top:8px;
        width: 0;
        height: 0;
        border:6px solid transparent;
    }
    .test-div:before{
        left:-11px;
        border-right-color: rgba(245,245,245,1);
        z-index:1
    }
    .test-div:after{
        left:-12px;
        border-right-color: rgba(0,0,0,1);
        z-index: 0
    }
  </style>
  <div class="test-div"></div>

复制代码

好了，完整的一个对话框样式呈现在眼前了，至于对话框的小三角形的方向，相信大家看了上上段对于border介绍的代码也都知道该怎么做了吧，没错，就是改下position的位置，改下border显示颜色的方位~ (本兽不喜欢贴图片，体谅下额，需要的可以拷贝代码直接运行看效果，造轮子不仅仅是造轮子，也能让人加深印象，更好的理解)
2.作为内容的半透明背景层。
比如我们的需求是做一个半透明的登录框吧(这里也是在代码中通过注释来解释)：
复制代码

  <style>
      body{
          background: url(img/1.jpg) no-repeat left top /*这里本兽加了个图片背景，用以区分背景的半透明及内容的完全不透明*/
      }
      .test-div{
          position: relative;  /*日常相对定位(重要，下面内容也会介绍)*/
          width:300px;
          height: 120px;
          padding: 20px 10px;
          font-weight: bold;
      }
      .test-div:before{
          position: absolute;  /*日常绝对定位(重要，下面内容也会略带介绍)*/
          content: "";  /*:before和:after必带技能，重要性为满5颗星*/
          top:0;
          left: 0;
          width: 100%;  /*和内容一样的宽度*/
          height: 100%;  /*和内容一样的高度*/
          background: rgba(255,255,255,.5); /*给定背景白色，透明度50%*/
          z-index:-1 /*日常元素堆叠顺序(重要，下面内容也会略带介绍)*/
      }
  </style>
  <!--这里容兽偷个懒，布局简单写写-->
  <div class="test-div">
      <table>
          <tr>
              <td>Name</td>
              <td><input placeholder="your name" /></td>
          </tr> 
          <tr>
              <td>Password</td>
              <td><input placeholder="your password" /></td>
          </tr> 
          <tr>
              <td></td>
              <td><input type="button" value="login" /></td>
          </tr>
      </table>
  </div>

复制代码

上面的代码拷贝过去，加上张图片可测试效果。
当然，:bofore和:after也还有其他更多的巧妙用法，这里也不一一列出来了，这里放上一个用这两个伪元素加上css3动画实现一些比较好看及实用的动态效果的链接：HoverEffectIdeas
说完了:before和:after，我们稍微扯扯一些其他的css样式及布局注意点(可能大家不怎么注意，从而导致一些布局和样式出问题)。
position 定位的问题
position属性规定了元素的定位类型，默认为static。
该属性还可以有下值：
absolute：生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。
fixed：生成绝对定位的元素，相对于浏览器窗口进行定位。
relative：生成相对定位的元素，相对于其正常位置进行定位。
inherit：规定应该从父元素继承 position 属性的值。
代码：
复制代码

<!--position:absolute-->
  <style>
      body{
          height: 2000px  /*这里将body的高度设置为2000px是为了区分absolute和fixed的差别*/
      }
      .test-div{
          position:absolute;
          left:50px;
          top:50px
      }
  </style>
  <div class="test-div">Hello World</div>
<!--position:fixed-->
  <style>
      body{
          height: 2000px  /*这里将body的高度设置为2000px是为了区分absolute和fixed的差别*/
      }
      .test-div{
          position:fixed;
          left:50px;
          top:50px
      }
  </style>
  <div class="test-div">Hello World</div>
<!--position:relative + position:absolute-->
  <style>
      .out-div{
          width: 300px;
          height: 300px;
          background: purple;  /*这里定义个背景，让我们知道这个div在哪*/
          margin:50px 0px 0px 50px;
          position: relative
      }
      .in-div{
          position:absolute;
          left:50px;
          top:50px
      }
  </style>
  <div class="out-div">
      <div class="in-div">Hello World</div>
  </div>

复制代码

z-index 元素堆叠排序
z-index用于设置或检索对象的堆叠顺序，对应的脚本特性为zIndex。
z-index的数值越大，该元素的堆叠层级越高。
代码：
复制代码

  <style>
      .first-div{
          width: 300px;
          height: 300px;
          background: purple;  /*这里定义个背景，让我们知道这个div在哪*/
          position: absolute;
          left:50px;
          top:50px;
          z-index: 1
      }
      .second-div{
          position:absolute;
          left:80px;
          top:80px;
          width:50px;
          height: 50px;
          background: white;
          z-index: 2
      }
  </style>
  <div class="first-div"></div>
  <div class="second-div"></div>

复制代码

这里我们将第一个div和第二个div位置放到一起，方便看z-index的效果。以上代码的样式是紫色的正方形里面有个白色的小正方形。因为小正方形的z-index大于大正方形的z-index，所以能显示出，当我们把.first-div的z-index设置为3，这时候就看不到白色的小正方形了，它被紫色的大正方形无情的挡掉了...
zoom 元素缩放比例
zoom适用于所有元素，用于设置或检索对象的缩放比例，对应的脚本特性为zoom，原比例的值是1。
代码：
复制代码

  <style>
      div{
          width: 100px;
          height: 100px;
          float: left
      }
      .first-div{
          background: purple;
          zoom:1.5
      }
      .second-div{
          background: black;
          zoom:1
      }
      .third-div{
          background: red;
          zoom:.5
      }
  </style>
  <div class="first-div"></div>
  <div class="second-div"></div>
  <div class="third-div"></div>

复制代码

以上代码将会展示的依次是紫色-黑色-红色的div，大小分别是100px的1.5倍，1倍，0.5倍。
em 和 rem 是什么
1em等于当前的字体尺寸，数值的改变意味着字体大小的调整。em 有继承这个特性，也就是说，外部父元素定义了字体的em大小，内部子元素会继承这一属性的样式。
rem = root em 。顾名思义，root即根部的，顶部的。也就是根部的em，这个根部指的是HTML根元素。所以rem的大小是针对HTML根元素的大小做字体的相对大小的调整。
代码：
复制代码

 <style>
      body{
        font-size: 12px;  
      }
      /*html{
          font-size: 12px;
      }*/
      div{
          width: 200px;
          height: 100px;
          float:left
      }
      .first-div{
          font-size: 1em
      }
      .second-div{
          font-size: 2em
      }
      .third-div{
          font-size: 1rem
      }
      .fourth-div{
          font-size: 2rem
      }
  </style>
  <div class="first-div">Hello World</div>
  <div class="second-div">Hello World</div>
  <div class="third-div">Hello World</div>
  <div class="fourth-div">Hello World</div>

复制代码

以上代码分别展示了不同大小的字体，em和rem的区别可以通过仅仅注释body字体样式和html字体样式来看看他们之间的差别。
今天暂时写到这里，明天就元旦了，可以好好休息三天了~ 元旦快乐~

这里做个小广告哦！ 推荐一本好友破狼和雪狼大叔写的关于Angular的学习书籍《AngularJS深度剖析与最佳实践》，本书已可预定，是一本技术含量想当不错的书籍哦，有兴趣的小伙伴可以上各大商城预定，也可点击以下预售链接：http://item.jd.com/11845736.html#none

transparent 

标签: CSS
好文要顶 关注我 收藏该文
野兽'
关注 - 6
粉丝 - 255
+加关注
2
1
? 上一篇：Jquery 随便写些知识点
? 下一篇：AngularJs 动态加载模块和依赖
posted @ 2015-12-31 22:40 野兽' 阅读(33348) 评论(16) 编辑 收藏

评论列表
  
#1楼 2015-12-31 23:04 yxd78910  
为什么无图呢，图文并茂才好啊
支持(1)反对(0)
  
#2楼[楼主] 2016-01-01 08:46 野兽'  
@ yxd78910
哈哈，这些代码都是拷过去运行即可的，不怎么喜欢放图，多打一遍有什么不好呢～
支持(0)反对(0)
  
#3楼 2016-02-17 11:55 Moldy bread  
赞博主，请问可以转载吗? 署名原作者及本文链接。
支持(0)反对(0)
  
#4楼[楼主] 2016-02-17 15:58 野兽'  
@ Moldy bread
欢迎转载及支持，写文章本就为了记录学习和分享知识呢
支持(0)反对(0)
  
#5楼 2016-02-17 16:13 Moldy bread  
@ 野兽'
感谢博主分享！
支持(0)反对(0)
  
#6楼 2016-07-28 21:41 野兔i  
感谢博主，我可以抱（转）走这篇可爱的文章吗？写名本文作者及链接。
支持(0)反对(0)
  
#7楼[楼主] 2016-07-29 10:39 野兽'  
@ 野兔i
完全可以~ 感谢支持哦
支持(0)反对(0)
  
#8楼 2016-08-08 15:18 chenby  
野兔。跟你情侣id，哈哈哈哈哈
支持(0)反对(0)
  
#9楼[楼主] 2016-08-09 18:36 野兽'  
@ chenby
....这都能发现，服了
支持(0)反对(0)
  
#10楼 2016-11-23 22:55 漠丶叹尘  
嘿嘿嘿 可惜了 没有运行的效果。。。只能脑补了
支持(0)反对(0)
  
#11楼 2017-01-11 10:59 flycumt  
大神求加qq好友
支持(0)反对(0)
  
#12楼 2017-03-07 15:55 SupremeHover  
指出个错误，border的设值的顺序是width、style、color。
支持(0)反对(0)
  
#13楼[楼主] 2017-03-07 20:35 野兽'  
@ SupremeHover
谢谢指出 已改正
支持(0)反对(0)
  
#14楼[楼主] 2017-03-07 20:36 野兽'  
@ 漠丶叹尘
我觉得自己跑跑代码更好呢
支持(0)反对(0)
  
#15楼[楼主] 2017-03-07 20:36 野兽'  
@ flycumt
有事可以这里找我 嘿嘿 很少加好友哈 谅解
支持(0)反对(0)
  
#16楼 2017-03-29 15:20 朝智一  
赞
支持(0)反对(0)
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
【推荐】50万行VC++源码: 大型组态工控、电力仿真CAD与GIS源码库
【免费】从零开始学编程，开发者专属实验平台免费实践！
阿里云B1
最新IT新闻:
・ 为什么书价房价再贵，也要买纸质书？
・ 东芝：美法院应驳回西部数据关于禁止东芝出售芯片业务的要求
・ 夏普要求在美国州法院审理对海信起诉案
・ 阿里股票6月份大涨18.44美元 市值增加了466亿美元
・ 摩托罗拉品牌重生，再归来首款手机藏着ZUK的内核
? 更多新闻...
极光推广_0701
最新知识库文章:
・ 小printf的故事：什么是真正的程序员？
・ 程序员的工作、学习与绩效
・ 软件开发为什么很难
・ 唱吧DevOps的落地，微服务CI/CD的范本技术解读
・ 程序员，如何从平庸走向理想？
? 更多知识库文章...
野兽信息
昵称：野兽'
园龄：2年6个月
粉丝：256
关注：6
+加关注
我的标签

    AngularJs(39)
    AngularJs Api(37)
    JavaScript(12)
    TypeScript(11)
    开发/调试工具(5)
    译(5)
    CSS(4)
    jQuery(3)
    Git(1)
    HTTP(1)
    更多

随笔档案

    2017年5月 (1)
    2017年3月 (1)
    2016年10月 (1)
    2016年9月 (1)
    2016年8月 (2)
    2016年7月 (1)
    2016年6月 (5)
    2016年5月 (1)
    2016年4月 (1)
    2016年3月 (8)
    2016年2月 (6)
    2016年1月 (4)
    2015年12月 (9)
    2015年11月 (29)
    2015年10月 (6)

阅读排行榜

    1. CSS 巧用 :before和:after(33345)
    2. AngularJs $http 请求服务(27697)
    3. AngularJs ui-router 路由的简单介绍(18566)
    4. AngularJs $interval 和 $timeout(16787)
    5. AngularJs angular.element(15949)
    6. AngularJs 动态加载模块和依赖(11273)
    7. AngularJs $resource 高大上的数据交互(9861)
    8. Chrome 开发工具之Network(9363)
    9. AngularJs $animate 让页面动起来(9045)
    10. AngularJs Cookies 操作(9013)

推荐排行榜

    1. Chrome 开发工具之Network(16)
    2. JavaScript 总结几个提高性能知识点(15)
    3. AngularJs 动态加载模块和依赖(7)
    4. TypeScript Basic Types(基本类型)(5)
    5. JavaScript 写几个简单的知识点(5)
    6. Chrome 开发工具之Sources(5)
    7. Chrome 开发工具之Elements(5)
    8. 《图解HTTP》阅读笔记(5)
    9. Chrome 开发工具之Timeline(5)
    10. Chrome 开发工具之Console(4)

友情链接：雨夹雪
